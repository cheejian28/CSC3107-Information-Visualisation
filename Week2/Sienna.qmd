---
title: "Week2Assignment"
author: "Team Sienna"
format: html
editor: visual
---

## Question 1

## Import Data

```{r}
#| label : import_data
#| echo: false
# Load required libraries
library(tidyverse)
library(readxl)
library(countrycode)

# Load each dataset into individual dataframes

# GDP per capita
gdp <- read_excel("data/API_NY.GDP.PCAP.CD_DS2_en_excel_v2_85284.xls", skip = 3)
gdp <- select(gdp, "Country Name", "Country Code", gdp_per_cap = "2019")
gdp

# Life Expectancy
life_expectancy <- read_excel("data/API_SP.DYN.LE00.IN_DS2_en_excel_v2_85119.xls", skip = 3)
life_expectancy <- select(life_expectancy, "Country Name", "Country Code", life_exp = "2019")
life_expectancy

# Population
population <- read_excel("data/API_SP.POP.TOTL_DS2_en_excel_v2_85347.xls", skip = 3)
population <- select(population, "Country Name", "Country Code", pop = "2019")
population
```

## Combine all three dataframes into one

```{r}
#| label: combine_data
#| echo: false
combined_df <- gdp %>%
  left_join(life_expectancy, by = c("Country Name", "Country Code")) %>%
  left_join(population, by = c("Country Name", "Country Code"))
combined_df
```

## Load codelist

```{r}
#| label: load_codelist
#| echo: false
data("codelist")
head(codelist)
```

## Final data frame

```{r}
#| label: final_data
#| echo: false
final_df <- combined_df %>%
  ## 2. Restrict to actual countries
  inner_join(codelist, by = c("Country Code" = "wb")) %>%
  
  ## 3. Add continent information
  select(name = "Country Name", code = "iso3c", gdp_per_cap, life_exp, pop, continent) %>%
  
  ## 4. Format data
  arrange(name) %>%
  
  ## 5. No Missing Data
  drop_na()

# Display final table
final_df
```

## Compare with reference data

```{r}
#| label: compare_data
#| echo: false
world_ref <- readr::read_csv("country_profiles_2019.csv")
waldo::compare(final_df, world_ref, tolerance = 1e-12)
```

## Question 2 Population Statistics for Singapore

In this section we’ll extract five-year age cohorts from the “T4” sheet of `outputFile.xlsx`, infer the size of the oldest cohort, and verify the result against `sg_5yr_cohorts.csv`.

## 2.1 Import Data

Read the “T4” sheet of the Excel file, skipping the first 10 rows of the sheet.

```{r}
#| label: import-data
library(tidyverse)  # loads dplyr, tidyr, stringr, readr, etc.
library(readxl)
library(waldo)

# Read T4, skipping the first 10 rows of metadata
t4 <- read_xlsx("data/outputFile.xlsx", sheet = "T4", skip = 10)
head(t4)
```

## 2.2 Extract the relevant rows

Select rows 37–86 of the original sheet (tibble rows 27–76).

```{r}
#| label: extract-rows
# Extract the rows 37–86 of the original sheet (tibble rows 27–76)
sg_raw <- t4 %>% slice(27:76)
head(sg_raw)
```

## 2.3 Convert year columns to numeric

Ensure every “year” column is stored as numeric.

```{r}
#| label: convert-types
# Ensure every “year” column is numeric
sg_raw <- sg_raw %>% 
  mutate(across(-`Data Series`, as.numeric))

head(sg_raw)
```

## 2.4 Split into male and female blocks

Find where “Total Female Residents” occurs and split into two tibbles.

```{r}
#| label: split-sex
# Find where the female block starts, then split
female_start <- which(sg_raw$`Data Series` == "Total Female Residents")
sg_male   <- sg_raw %>% slice(1:(female_start - 1))
sg_female <- sg_raw %>% slice((female_start + 1):n())
sg_male
sg_female
```

## 2.5 Pivot to long and add a "sex" column

Reshape each half to long format and add a sex column.

```{r}
#| label: pivot-long
# Pivot each half to long and tag sex
sg_long <- bind_rows(
  sg_male %>%
    pivot_longer(
      cols      = -`Data Series`, 
      names_to  = "year", 
      values_to = "pop"
    ) %>%
    mutate(sex = "Male"),
  
  sg_female %>%
    pivot_longer(
      cols      = -`Data Series`, 
      names_to  = "year", 
      values_to = "pop"
    ) %>%
    mutate(sex = "Female")
)
sg_long
```

# 2.6 Tidy cohorts and dedupe

Extract numeric age, flag cumulative rows, sort so closed bins beat “& Over,” then dedupe.

```{r}
#| label: tidy-cohorts

sg_tidy <- sg_long %>%
  rename(cohort = `Data Series`) %>%
  mutate(
    year          = as.integer(year),
    age           = as.integer(str_extract(cohort, "^[0-9]+")),
    is_cumulative = str_detect(cohort, "Years & Over"),
    sex           = factor(sex, levels = c("Male", "Female"))
  ) %>%
  arrange(sex, year, age, is.na(pop), is_cumulative) %>%
  distinct(sex, year, age, .keep_all = TRUE)
sg_tidy
```

# 2.7 Filter decades and nonzero values

Keep only decades (1960–2020), drop NA ages/pops and zero counts, then select final columns.

```{r}
#| label: filter-data


sg_tidy <- sg_tidy %>%
  filter(
    year %in% seq(1960, 2020, by = 10),
    !is.na(age),
    !is.na(pop),
    pop != 0
  ) %>%
  select(age, sex, year, pop) %>%
  arrange(age, sex, year)
sg_tidy
```

# 2.8 Verify against the reference CSV

Compare to the provided CSV to ensure an exact match.

```{r}
#| label: verify
# Compare to the provided CSV to verify
sg_ref <- read_csv(
  "sg_5yr_cohorts.csv",
  col_types = cols(sex = col_factor(levels = c("Male", "Female")))
)
waldo::compare(sg_tidy, sg_ref, tolerance = 1e-12)
```

# 2. 9 Display the final tidy table

```{r}
#| label: show-final
print(sg_tidy, n = 20)
```
