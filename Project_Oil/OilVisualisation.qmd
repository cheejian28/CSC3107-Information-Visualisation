---
title: "OilVisualisation"
author: "Hew Zhong Xuan, Chuah Chee Jian, Lim Kuan Yong, Tan Ting Xuan Daryl, Kua Dong Han, Chek Yu Ting Amanda"
format: html
editor: visual
---

## Load Required Libraries

```{r}
# Load required libraries
library(tidyverse)
library(readxl)

# For visualisation
library(grid)  # Needed for arrow()
library(ggplot2)
library(sf)
library(cartogram)
library(rnaturalearth)
library(dplyr)
library(countrycode)
library(viridis)
library(ggrepel)
```

## Load Data

```{r}
df <- read_excel("Statistical_Review_of_World_Energy_Data.xlsx", 
                 sheet = "Oil Production - barrels",
                 skip = 2) %>%
  select("Country/Region" = 1, Production_2022 = `2022`)
```

## Data Cleaning

```{r}
df <- df %>%drop_na() %>%
  mutate(across(1, ~ifelse(str_detect(., "of which: OECD"), "OECD", .)))
df
```

```{r}
df_clean <- df %>%
  filter(!str_detect(`Country/Region`, "^Total|^Other|^Non|^OPEC|^OECD|European Union|World|USSR")) %>%
  mutate(iso_a3 = countrycode(`Country/Region`, "country.name", "iso3c"))
df_clean
```

## Visualisation

This is Visualization 1 which incorporates a cartogram with legend on the right side

```{r}
# Loading a base world map
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# Merging the world map with the oil production data
world_data <- left_join(world, df_clean, by = c("iso_a3" = "iso_a3"))

# Transform to a projected coordinate reference system (CRS). In this case, we use the Mercator projection.
world_data_proj <- st_transform(world_data, crs = 3857) %>% 
  filter(!is.na(Production_2022))

# Create continuous area cartogram weighted by Production_2022
carto <- cartogram_cont(world_data_proj, weight = "Production_2022", itermax = 2)

# Calculate centroids for label placement and area for font sizing
centroids <- suppressWarnings(
  carto %>%
  st_centroid() %>%
  mutate(
    visible_area = st_area(geometry) %>% as.numeric(),
    font_size = scales::rescale(visible_area, to = c(2.5, 4))  # adjust scale as needed
  )
)

# Extract coordinates from centroids 
centroids_coords <- centroids %>%
  mutate(
    x = st_coordinates(geometry)[,1],
    y = st_coordinates(geometry)[,2]
  )

# Show the top 15 countries by oil production for labeling
top_labels <- centroids_coords %>%
  mutate(`Country/Region` = ifelse(`Country/Region` == "Russian Federation", "Russia", `Country/Region`)) %>% 
  slice_max(order_by = Production_2022, n = 15)

ggplot(carto) +
  geom_sf(aes(fill = Production_2022), color = "black", linewidth = 0.1) +
  geom_text_repel(
    data = top_labels,
    aes(x = x, y = y, label = `Country/Region`, size = font_size),
    color = "black",
    segment.color = "black",
    segment.size = 0.9,
    segment.alpha = 0.8,
    segment.curvature = 0.1,
    segment.angle = 20,     
    arrow = arrow(length = unit(0.15, "cm"), type = "closed"),
    force = 1.5,
    box.padding = 0.6,
    point.padding = 0.4,
    min.segment.length = unit(0.2, "lines"),  # <- avoid near-zero segments
    max.overlaps = 15,
    bg.color = "white", 
    bg.r = 0.15
  ) +
  scale_size_identity() +
  scale_fill_gradient(
    low = "#deebf7", 
    high = "#08519c",
    name = "Production (barrels)",
    labels = scales::comma
  ) +
  guides(fill = guide_colorbar(
    barwidth = 0.3,   # Slim colorbar
    barheight = 6     # Taller bar to preserve readability
  )) +
  theme_minimal(base_family = "sans") +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.grid = element_blank(),
    panel.background = element_rect(fill = "#f8f9fa"),
    plot.background = element_rect(fill = "#f8f9fa"),

    # Legend layout on the right but compact
    legend.position = "right",
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    legend.key.size = unit(0.3, "cm"),
    legend.spacing = unit(0.2, "cm"),
    legend.box.margin = margin(0, 2, 0, 2)
  ) +
  labs(title = "Global Daily Oil Production Cartogram (2022)")
```

This is Visualization 2 which incorporates a cartogram with legend on the bottom

```{r}
# Loading a base world map
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# Merging the world map with the oil production data
world_data <- left_join(world, df_clean, by = c("iso_a3" = "iso_a3"))

# Transform to a projected coordinate reference system (CRS). In this case, we use the Mercator projection.
world_data_proj <- st_transform(world_data, crs = 3857) %>% 
  filter(!is.na(Production_2022))

# Create continuous area cartogram weighted by Production_2022
carto <- cartogram_cont(world_data_proj, weight = "Production_2022", itermax = 5)

# Calculate centroids for label placement and area for font sizing
centroids <- suppressWarnings(
  carto %>%
  st_centroid() %>%
  mutate(
    visible_area = st_area(geometry) %>% as.numeric(),
    font_size = scales::rescale(visible_area, to = c(1.5, 4))  # adjust scale as needed
  )
)

# Extract coordinates from centroids 
centroids_coords <- centroids %>%
  mutate(
    x = st_coordinates(geometry)[,1],
    y = st_coordinates(geometry)[,2]
  )

# Show the top 15 countries by oil production for labeling
top_labels <- centroids_coords %>%
  mutate(`Country/Region` = ifelse(`Country/Region` == "Russian Federation", "Russia", `Country/Region`)) %>% 
  slice_max(order_by = Production_2022, n = 15)

ggplot(carto) +
  geom_sf(aes(fill = Production_2022), color = "black", linewidth = 0.1) +
  geom_text_repel(
    data = top_labels,
    aes(x = x, y = y, label = `Country/Region`, size = font_size),
    color = "black",
    segment.color = "black",
    segment.alpha = 0.8,
    segment.curvature = 0.1,
    segment.angle = 20,
    arrow = arrow(length = unit(0.15, "cm"), type = "closed"),
    force = 2,                              # Push labels away further
    box.padding = 0.6,
    point.padding = 0.4,
    min.segment.length = unit(0.2, "lines"),  # Prevent zero-length segments
    max.overlaps = 15,
    segment.size = 0.75,
    bg.color = "white", 
    bg.r = 0.15
  ) +
  scale_size_identity() +
  scale_fill_gradient(
    low = "#deebf7", 
    high = "#08519c",
    name = "Production (barrels)",
    labels = scales::comma
  ) +
guides(fill = guide_colorbar(
  title.position = "top",
  barwidth = unit(20, "lines"),  # wider
  barheight = unit(0.5, "lines"), # flatter
  title.hjust = 0.5
)) +
theme_minimal(base_family = "sans") +
theme(
  plot.title = element_text(size = 14, face = "bold"),
  panel.grid = element_blank(),
  panel.background = element_rect(fill = "#f8f9fa"),
  plot.background = element_rect(fill = "#f8f9fa"),
  legend.title = element_text(size = 10),
  legend.text = element_text(size = 9),
  legend.key.size = unit(0.3, "cm"),
  legend.position = "bottom",
  plot.margin = margin(20, 30, 20, 30)
) +
  labs(title = "Global Daily Oil Production Cartogram (2022)")
```

This is visualisation 3 without the distortion from the Oil Production value

```{r}
# Loading a base world map
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")

# Merging the world map with the oil production data
world_data <- left_join(world, df_clean, by = c("iso_a3" = "iso_a3"))

# Transform to a projected coordinate reference system (CRS). In this case, we use the Mercator projection.
world_data_proj <- st_transform(world_data, crs = 3857) %>% 
  filter(!is.na(Production_2022))

# Create continuous area cartogram weighted by Production_2022
carto <- world_data_proj

# Calculate centroids for label placement and area for font sizing
centroids <- suppressWarnings(
  carto %>%
  st_centroid() %>%
  mutate(
    visible_area = st_area(geometry) %>% as.numeric(),
    font_size = scales::rescale(visible_area, to = c(1.5, 4))  # adjust scale as needed
  )
)

# Extract coordinates from centroids 
centroids_coords <- centroids %>%
  mutate(
    x = st_coordinates(geometry)[,1],
    y = st_coordinates(geometry)[,2]
  )

# Show the top 15 countries by oil production for labeling
top_labels <- centroids_coords %>%
  mutate(`Country/Region` = ifelse(`Country/Region` == "Russian Federation", "Russia", `Country/Region`)) %>% 
  slice_max(order_by = Production_2022, n = 15)

ggplot(carto) +
  geom_sf(aes(fill = Production_2022), color = "black", linewidth = 0.1) +
  geom_text_repel(
    data = top_labels,
    aes(x = x, y = y, label = `Country/Region`, size = font_size),
    color = "black",
    segment.color = "black",
    segment.alpha = 0.8,
    segment.curvature = 0.1,
    segment.angle = 20,
    arrow = arrow(length = unit(0.15, "cm"), type = "closed"),
    force = 2,                              # Push labels away further
    box.padding = 0.6,
    point.padding = 0.4,
    min.segment.length = unit(0.2, "lines"),  # Prevent zero-length segments
    max.overlaps = 15,
    segment.size = 0.75,
    bg.color = "white", 
    bg.r = 0.15
  ) +
  scale_size_identity() +
  scale_fill_gradient(
    low = "#deebf7", 
    high = "#08519c",
    name = "Production (barrels)",
    labels = scales::comma
  ) +
guides(fill = guide_colorbar(
  title.position = "top",
  barwidth = unit(20, "lines"),  # wider
  barheight = unit(0.5, "lines"), # flatter
  title.hjust = 0.5
)) +
theme_minimal(base_family = "sans") +
theme(
  plot.title = element_text(size = 14, face = "bold"),
  panel.grid = element_blank(),
  panel.background = element_rect(fill = "#f8f9fa"),
  plot.background = element_rect(fill = "#f8f9fa"),
  legend.title = element_text(size = 10),
  legend.text = element_text(size = 9),
  legend.key.size = unit(0.3, "cm"),
  legend.position = "bottom",
  plot.margin = margin(20, 30, 20, 30)
) +
  labs(title = "Global Daily Oil Production Cartogram (2022)")
```

Visualisation 4 using Horizontal Barcharts

```{r}
# Load required libraries
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)

# Read the CSV file with better column specification
# Note: You'll need to adjust the file path to match your file location
oil_data <- read_csv("Oil Production 2022.csv", skip = 2, show_col_types = FALSE)

# First, let's examine the structure and clean the data
print("Column names:")
print(names(oil_data))

# Clean and prepare the data
oil_clean <- oil_data %>%
  # Rename the first column to Country
  rename(Country = names(.)[1]) %>%
  # Select country and 2022 production data (assuming 2022 is the last or second-to-last column)
  select(Country, `2022`) %>%
  # Remove empty rows and total rows
  filter(!is.na(Country), 
         Country != "",
         !grepl("^Total", Country, ignore.case = TRUE),
         !is.na(`2022`),
         `2022` != "") %>%
  # Convert production to numeric, handling any special characters
  mutate(Production_2022 = as.numeric(gsub("[^0-9.]", "", `2022`))) %>%
  # Remove rows where conversion failed or production is very low
  filter(!is.na(Production_2022), Production_2022 > 50) %>%
  select(Country, Production_2022)

# Print the countries we found to verify
print("Countries found in data:")
print(oil_clean$Country)

# Create continent mapping function based on the regional structure in your data
assign_continent <- function(country) {
  case_when(
    # North America
    country %in% c("Canada", "Mexico", "US") ~ "North America",
    
    # South & Central America
    country %in% c("Argentina", "Brazil", "Colombia", "Ecuador", "Guyana", "Peru", 
                   "Trinidad & Tobago", "Venezuela", "Other S. & Cent. America") ~ "South & Central America",
    
    # Europe
    country %in% c("Denmark", "Italy", "Norway", "Romania", "United Kingdom", "Other Europe") ~ "Europe",
    
    # CIS (Former Soviet Union)
    country %in% c("Azerbaijan", "Kazakhstan", "Russian Federation", "Turkmenistan", 
                   "USSR", "Uzbekistan", "Other CIS") ~ "CIS",
    
    # Middle East
    country %in% c("Iran", "Iraq", "Kuwait", "Oman", "Qatar", "Saudi Arabia", "Syria", 
                   "United Arab Emirates", "Yemen", "Other Middle East") ~ "Middle East",
    
    # Africa
    country %in% c("Algeria", "Angola", "Chad", "Republic of Congo ", "Egypt", "Equatorial Guinea", 
                   "Gabon", "Libya", "Nigeria", "South Sudan", "Sudan", "Tunisia", "Other Africa") ~ "Africa",
    
    # Asia Pacific
    country %in% c("Australia", "Brunei", "China", "India", "Indonesia", "Malaysia", 
                   "Thailand", "Vietnam", "Other Asia Pacific") ~ "Asia Pacific",
    
    # Default for any unmatched countries
    TRUE ~ "Other"
  )
}

# Apply continent assignment
oil_clean <- oil_clean %>%
  mutate(Continent = assign_continent(Country)) %>%
  # Remove any countries that didn't get assigned to a continent
  filter(Continent != "Other")

# Create final dataset
oil_final <- oil_clean %>%
  # Sort countries alphabetically within continents
  arrange(Continent, Country) %>%
  # Create a factor for proper ordering in the plot
  mutate(
    Continent = factor(Continent, levels = c("North America", "South & Central America", 
                                           "Europe", "CIS", "Middle East", "Africa", "Asia Pacific")),
    Country = factor(Country, levels = Country)
  )

# Print final dataset for verification
print("Final dataset:")
print(oil_final)

# Create the horizontal bar chart
p <- ggplot(oil_final, aes(x = Production_2022, y = Country, fill = Continent)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(type = "qual", palette = "Set3") +
  labs(
    title = "Oil Production by Country (2022)",
    subtitle = "Organized by continent, countries sorted alphabetically within each continent",
    x = "Production (Thousand barrels daily)",
    y = "Country",
    fill = "Continent",
    caption = "Source: BP Statistical Review of World Energy"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.text.y = element_text(size = 8),
    axis.text.x = element_text(size = 10),
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  # Add continent labels on the y-axis
  facet_grid(Continent ~ ., scales = "free_y", space = "free_y", switch = "y") +
  theme(
    strip.text.y.left = element_text(angle = 0, hjust = 1, face = "bold"),
    strip.placement = "outside"
  )

# Display the plot
print(p)

# Optional: Save the plot
ggsave("oil_production_2022.png", plot = p, width = 14, height = 25, dpi = 300)

# Display summary statistics
cat("Summary of Oil Production Data (2022):\n")
oil_final %>%
  group_by(Continent) %>%
  summarise(
    Countries = n(),
    Total_Production = sum(Production_2022, na.rm = TRUE),
    Avg_Production = mean(Production_2022, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(Total_Production)) %>%
  print()
```

Visualisation 5

```{r}
# Load required libraries
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)

# Read the CSV file with better column specification
# Note: You'll need to adjust the file path to match your file location
oil_data <- read_csv("Oil Production 2022.csv", skip = 2, show_col_types = FALSE)

# First, let's examine the structure and clean the data
print("Column names:")
print(names(oil_data))

# Clean and prepare the data
oil_clean <- oil_data %>%
  # Rename the first column to Country
  rename(Country = names(.)[1]) %>%
  # Select country and 2022 production data (assuming 2022 is the last or second-to-last column)
  select(Country, `2022`) %>%
  # Remove empty rows and total rows
  filter(!is.na(Country), 
         Country != "",
         !grepl("^Total", Country, ignore.case = TRUE),
         !is.na(`2022`),
         `2022` != "") %>%
  # Convert production to numeric, handling any special characters
  mutate(Production_2022 = as.numeric(gsub("[^0-9.]", "", `2022`))) %>%
  # Remove rows where conversion failed or production is very low
  filter(!is.na(Production_2022), Production_2022 > 50) %>%
  select(Country, Production_2022)

# Print the countries we found to verify
print("Countries found in data:")
print(oil_clean$Country)

# Create continent mapping function based on the regional structure in your data
assign_continent <- function(country) {
  case_when(
    # North America
    country %in% c("Canada", "Mexico", "US") ~ "North America",
    
    # South & Central America
    country %in% c("Argentina", "Brazil", "Colombia", "Ecuador", "Guyana", "Peru", 
                   "Trinidad & Tobago", "Venezuela", "Other S. & Cent. America") ~ "South & Central America",
    
    # Europe
    country %in% c("Denmark", "Italy", "Norway", "Romania", "United Kingdom", "Other Europe") ~ "Europe",
    
    # CIS (Former Soviet Union)
    country %in% c("Azerbaijan", "Kazakhstan", "Russian Federation", "Turkmenistan", 
                   "USSR", "Uzbekistan", "Other CIS") ~ "CIS",
    
    # Middle East
    country %in% c("Iran", "Iraq", "Kuwait", "Oman", "Qatar", "Saudi Arabia", "Syria", 
                   "United Arab Emirates", "Yemen", "Other Middle East") ~ "Middle East",
    
    # Africa
    country %in% c("Algeria", "Angola", "Chad", "Republic of Congo ", "Egypt", "Equatorial Guinea", 
                   "Gabon", "Libya", "Nigeria", "South Sudan", "Sudan", "Tunisia", "Other Africa") ~ "Africa",
    
    # Asia Pacific
    country %in% c("Australia", "Brunei", "China", "India", "Indonesia", "Malaysia", 
                   "Thailand", "Vietnam", "Other Asia Pacific") ~ "Asia Pacific",
    
    # Default for any unmatched countries
    TRUE ~ "Other"
  )
}

# Apply continent assignment
oil_clean <- oil_clean %>%
  mutate(Continent = assign_continent(Country)) %>%
  # Remove any countries that didn't get assigned to a continent
  filter(Continent != "Other")

# Create final dataset
oil_final <- oil_clean %>%
  # Sort countries alphabetically within continents
  arrange(Continent, Country) %>%
  # Create a factor for proper ordering in the plot
  mutate(
    Continent = factor(Continent, levels = c("North America", "South & Central America", 
                                           "Europe", "CIS", "Middle East", "Africa", "Asia Pacific")),
    Country = factor(Country, levels = Country)
  )

# Print final dataset for verification
print("Final dataset:")
print(oil_final)

# Create the horizontal bar chart
p <- ggplot(oil_final, aes(x = Production_2022, y = Country, fill = Continent)) +
  geom_col(width = 0.7) +
  scale_fill_brewer(type = "qual", palette = "Set3") +
  labs(
    title = "Oil Production by Country (2022)",
    subtitle = "Organized by continent, countries sorted alphabetically within each continent",
    x = "Production (Thousand barrels daily)",
    y = "Country",
    fill = "Continent",
    caption = "Source: BP Statistical Review of World Energy"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.text.y = element_text(size = 8),
    axis.text.x = element_text(size = 10),
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  # Add continent labels on the y-axis
  facet_grid(Continent ~ ., scales = "free_y", space = "free_y", switch = "y") +
  theme(
    strip.text.y.left = element_text(angle = 0, hjust = 1, face = "bold"),
    strip.placement = "outside"
  )

# Display the plot
print(p)

# Optional: Save the plot
ggsave("oil_production_2022.png", plot = p, width = 12, height = 16, dpi = 300)

# Display summary statistics
cat("Summary of Oil Production Data (2022):\n")
oil_final %>%
  group_by(Continent) %>%
  summarise(
    Countries = n(),
    Total_Production = sum(Production_2022, na.rm = TRUE),
    Avg_Production = mean(Production_2022, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(Total_Production)) %>%
  print()
```
